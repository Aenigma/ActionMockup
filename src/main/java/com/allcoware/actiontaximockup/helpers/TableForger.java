/*
 * Copyright (C) 2014 Jon Butler, Sam Morekas,
 *     Rushikesh Parekh, and Kevin Raoofi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.allcoware.actiontaximockup.helpers;

import com.allcoware.actiontaximockup.ui.resourceholders.CabFormFactory;
import com.allcoware.actiontaximockup.ui.resourceholders.DriverFormFactory;
import com.allcoware.actiontaximockup.ui.resourceholders.RecurringTransactionFormFactory;
import com.allcoware.actiontaximockup.ui.resourceholders.TransactionFormFactory;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alfred
 */
public class TableForger extends javax.swing.JPanel {

    private DriverFormFactory driverForm;
    private CabFormFactory cabForm;
    private RecurringTransactionFormFactory recurringForm;
    private TransactionFormFactory transactionForm;

    private Object[][] data = null;
    private String[] columnNames = null;
    private int manager = -1;

    /**
     * Creates new form TableForger
     *
     * @param manager
     */
    public TableForger(int manager, DriverFormFactory driverForm, CabFormFactory cabForm, RecurringTransactionFormFactory recurringForm, TransactionFormFactory transactionForm) {
        initComponents();
        this.manager = manager;
        this.driverForm = driverForm;
        this.cabForm = cabForm;
        this.recurringForm = recurringForm;
        this.transactionForm = transactionForm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View");

        jButton3.setText("Remove");

        jButton4.setText("Search");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextField1.setText("jTextField1");

        jButton5.setText("Instantiate Table");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        //Driver Menu Table
        if (manager == 1) {
            columnNames = new String[]{"Driver Number", "First Name", "Middle Name", "Last Name", "Phone Number", "Cab Number"};
            if (!(driverForm.getMap().isEmpty())) {
                data = new Object[driverForm.getMap().size() + 1][columnNames.length];
                addDriverElement(0, 0, 0);
            } else {
                data = new Object[2][columnNames.length];
            }
        } 

        //Cab Menu Table
        else if (manager == 2) {
            columnNames = new String[]{"Cab ID"};
            if (!(cabForm.getMap().isEmpty())) {
                data = new Object[cabForm.getMap().size() + 1][columnNames.length];
                addCabElement(0, 0, 0);
            } else {
                data = new Object[2][columnNames.length];
            }
        } 

       
        //Recurring Transaction  Menu Table
        else if (manager == 3) {
            columnNames = new String[]{"Year", "Month", "Day", "Hour", "Minute", "Periodic Amount", "Cap Amount"};
            if (!(recurringForm.getMap().isEmpty())) {
                data = new Object[recurringForm.getMap().size() + 1][columnNames.length];
                addRecurringTransactionElement(0, 0, 0);
            } else {
                data = new Object[2][columnNames.length];
            }
        } 
        
        //Transaction  Menu Table
        else if (manager == 4) {
            columnNames = new String[]{"Year", "Month", "Day", "Hour", "Minute", "Amount"};
            if (!(transactionForm.getMap().isEmpty())) {
                data = new Object[transactionForm.getMap().size() + 1][columnNames.length];
                addTransactionElement(0, 0, 0);
            } else {
                data = new Object[2][columnNames.length];
            }
        }
        //*/

        jTable1.setModel(new DefaultTableModel(data, columnNames));
    }//GEN-LAST:event_jButton5ActionPerformed

    private void addDriverElement(int location, int column, int row) {
        while (driverForm.getMap().size() <= location) {
            while (row <= columnNames.length) {
                if (row == 0) {
                    //this is where my problem is... I dont understand how to use the key..?
                    data[column][row] = driverForm.getForm(Long.MIN_VALUE).getResource().getNumber();
                } else if (row == 1) {
                    //this is where my problem is... I dont understand how to use the key..?
                    data[column][row] = driverForm.getForm(Long.MIN_VALUE).getResource().getFirstName();
                } else if (row == 2) {
                    //this is where my problem is... I dont understand how to use the key..?
                    data[column][row] = driverForm.getForm(Long.MIN_VALUE).getResource().getMiddleName();
                } else if (row == 3) {
                    //this is where my problem is... I dont understand how to use the key..?
                    data[column][row] = driverForm.getForm(Long.MIN_VALUE).getResource().getLastName();
                } else if (row == 4) {
                    //this is where my problem is... I dont understand how to use the key..?
                    data[column][row] = driverForm.getForm(Long.MIN_VALUE).getResource().getPhone();
                } else if (row == 5) {
                    //this is where my problem is... I dont understand how to use the key..?
                    data[column][row] = driverForm.getForm(Long.MIN_VALUE).getResource().getCab().getCabID();
                }
                row++;
            }
            addDriverElement(location++, column++, 0);
        }
    }

    private void addCabElement(int location, int column, int row) {
        while (cabForm.getMap().size() <= location) {
            while (row <= columnNames.length) {
                if (row == 0) {
                    //this is where my problem is... I dont understand how to use the key..?
                    data[column][row] = cabForm.getForm(Long.MIN_VALUE).getResource().getCabID();
                }
                row++;
            }
            addCabElement(location++, column++, 0);
        }
    }

    
    private void addRecurringTransactionElement(int location, int column, int row) {
        while (recurringForm.getMap().size() <= location) {
            while (row <= columnNames.length) {
                if (row == 0) {
                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = recurringForm.getForm(Long.MIN_VALUE).getResouce().getRecurringTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//year
//                } else if (row == 1) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = recurringForm.getForm(Long.MIN_VALUE).getResouce().getRecurringTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//month
//                } else if (row == 2) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = recurringForm.getForm(Long.MIN_VALUE).getResouce().getRecurringTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//day
//                } else if (row == 3) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = recurringForm.getForm(Long.MIN_VALUE).getResouce().getRecurringTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//hour
//                } else if (row == 4) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = recurringForm.getForm(Long.MIN_VALUE).getResouce().getRecurringTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//minute
//                } else if (row == 5) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = recurringForm.getForm(Long.MIN_VALUE).getResouce().getRecurringTransactions().getPeriodicAmount(). ?  ?  ?  ?  ?  ?;//periodic amount
//                } else if (row == 6) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = recurringForm.getForm(Long.MIN_VALUE).getResouce().getRecurringTransactions().getCapAmount(). ?  ?  ?  ?  ?  ?;//cap amount
                }
                row++;
            }
            addRecurringTransactionElement(location++, column++, 0);
        }
    }

    private void addTransactionElement(int location, int column, int row) {
        while (transactionForm.getMap().size() <= location) {
            while (row <= columnNames.length) {
                if (row == 0) {
                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = transactionForm.getForm(Long.MIN_VALUE).getResouce().getTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//year
//                } else if (row == 1) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = transactionForm.getForm(Long.MIN_VALUE).getResouce().getTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//month
//                } else if (row == 2) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = transactionForm.getForm(Long.MIN_VALUE).getResouce().getTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//day
//                } else if (row == 3) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = transactionForm.getForm(Long.MIN_VALUE).getResouce().getTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//hour
//                } else if (row == 4) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = transactionForm.getForm(Long.MIN_VALUE).getResouce().getTransactions().getStartingInstant(). ?  ?  ?  ?  ?  ?;//minute
//                } else if (row == 5) {
//                    //ok so I have no Idea how to get what I want out of this....
//                    data[column][row] = transactionForm.getForm(Long.MIN_VALUE).getResouce().getTransactions().getAmount(). ?  ?  ?  ?  ?  ?;//amount
                }
                row++;
            }
            addTransactionElement(location++, column++, 0);
        }
    }
    //*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
