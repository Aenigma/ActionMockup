/*
 * Copyright (C) 2014 Jon Butler, Sam Morekas,
 *     Rushikesh Parekh, and Kevin Raoofi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.allcoware.actiontaximockup;

/**
 *
 * @author Kevin Raoofi
 * @param <K>
 * @param <R>
 */
public interface ResourceManager<K, R> {

    /**
     * Adds a new resource into storage. The resource should not already exist.
     * If it does, use {@link #update(java.lang.Object)}. This method is
     * intended to be used when the key is managed by the resource or when the
     * key is generated by the implementor.
     *
     * @param value resource to be stored
     * @return the key used to store the resource
     */
    void create(R value);

    /**
     * Creates a resource with the specified key. If the implementor does not
     * support changing the key from a resource which contains its own keys,
     * then this method can throw an exception.
     *
     * @param key   key for resource
     * @param value the resource to persist
     * @throws UnsupportedOperationException
     */
    void create(K key, R value) throws UnsupportedOperationException;

    /**
     * Finds and returns a resource using the key.
     *
     * @param key
     * @return
     */
    R read(K key);

    /**
     * Updates the resource with the given resource.
     * 
     * @param resource 
     */
    void update(R resource);

    void update(K key, R value);

    void delete(R resource);

    public default boolean contains(Object o) {
        return read((K) o) != null;
    }

    public default boolean add(R e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public default boolean remove(Object o) {
        R r = (R) o;

        if (contains(r)) {
            delete(r);
            return true;
        }
        return false;
    }
}
